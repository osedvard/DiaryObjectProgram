Appen jeg ahar laget er en enkelt dagbok. Hvor man kan legge inn entries, eller på norsk en oppføring.
Hver oppføring har tittel, innhold, dato og id. I tillegg kan innholdet både være tekst, eller hvis man
ønsker så kan innholdet være et bilde du velger lokalt fra datamaskinen. Hvis brukeren fyller de 
nødvendige feltene, og trykker lagre inlegg vil tittel og innholdet lagres i en HBox i appen, sammen
med dato og id. Automatisk vil appen ved oppstart se gjennom filen
diaryentries.txt og generere de oppføringene som står i denne txt filen. Samtidig vil nye tekstinnlegg
også legges inn i diaryentries.txt, slik at det lagres til neste gang. diaryentries.txt lagrer kun
tesktentries. Har også mulighet til å slette innlegg ved å referere til en oppføring med en bestemt id.
Man kan også tømme dagboken. Sletting av entries gjør ingen endringer i diaryentries. 

1. Hvilke deler av pensum i emnet dekkes i prosjektet, og på hvilken måte? (For
eksempel bruk av arv, interface, delegering osv.)

Arv: textEntry og pictureEntry arver fra Entry klassen.
Interface: Entry implementerer EntryInterface, Checks bruker iterable for å iterere gjennom listen over
    entries for å finne ut om det er en ID match.
Delegering: Delegerer sjekk arbeid til Checks klassen, slik at den gjør sjekke arbeidet som å
    valuere at ID-en eksisterer i diaryentries, så sparer man diarycontroller for kode.
Listeners: Det er ingen listeners i oppgaven



2. Dersom deler av pensum ikke er dekket i prosjektet deres, hvordan kunne dere brukt
disse delene av pensum i appen?

Kunne implementert listeners ved å lage en liste over flere dagbøker, og hver gang en dagbok ble
    oppdatert fikk listen over dagbøker klassen en notifikasjon.


3. Hvordan forholder koden deres seg til Model-View-Controller-prinsippet? (Merk: det
er ikke nødvendig at koden er helt perfekt i forhold til Model-View-Controller
standarder. Det er mulig (og bra) å reflektere rundt svakheter i egen kode)

Jeg har tydelig brukt model-view-controller prinsippet. Model kan kalles "backend" strukturen, og inneholder
objektene Chekcks, Entry, EntryInterface, textEntry, pictureEntry og Keywords. View er representert av
mainview.fxml. Bindeleddet mellom model og view er da DiaryController, som gjør at brukerinteraksjon fører
til en reaksjon i modellen, som igjen slår ut i en oppdatert view. Input sendes via controller, modifiseres
via Model, og output sendes tilbake via Controller til View. Model, view og controller er også skilt inn i 
seperate mapper for å holde orden.

4. Hvordan har dere gått frem når dere skulle teste appen deres, og hvorfor har dere
valgt de testene dere har? Har dere testet alle deler av koden? Hvis ikke, hvordan
har dere prioritert hvilke deler som testes og ikke? (Her er tanken at dere skal
reflektere rundt egen bruk av tester)
